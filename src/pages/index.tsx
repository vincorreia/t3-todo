import { type NextPage } from "next";
import Head from "next/head";
import { type MouseEvent, useRef } from "react";
import { Row } from "../components/molecules/Row";

import { api } from "../utils/api";

const Home: NextPage = () => {
  const allTodoLists = api.todolists.getAll.useQuery();

  const apiContext = api.useContext();

  const createTodoInput = useRef<HTMLInputElement | null>(null);

  const invalidateGetAll = async () =>
    await apiContext.todolists.getAll.invalidate();

  const deleteTodo = api.todolists.deleteTodolist.useMutation({
    async onSuccess() {
      await invalidateGetAll();
    },
  });

  const editTodo = api.todolists.editTodolist.useMutation({
    async onSuccess() {
      await invalidateGetAll();
    },
  });

  const todolistsMutation = api.todolists.createTodolist.useMutation({
    async onSuccess() {
      await invalidateGetAll();
      if (createTodoInput.current) {
        createTodoInput.current.value = "";
      }
    },
  });

  const handleCreateTodo = (e: MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    const input = createTodoInput.current;

    input?.value &&
      todolistsMutation.mutate({
        title: input.value,
      });
  };

  const handleDeleteTodo = (id: string) => () => {
    deleteTodo.mutate({ id });
  };

  const confirmEditTodolist = (id: string) => (title: string) => {
    editTodo.mutate({
      id,
      title,
    });
  };

  return (
    <>
      <Head>
        <title>Lists</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Lists
          </h1>
          <label htmlFor="createTodoList">
            <input type="text" ref={createTodoInput} />
          </label>

          <button
            className="border border-white p-2"
            onClick={handleCreateTodo}
            type="button"
          >
            <span className="text-white">Create Todolist</span>
          </button>

          {allTodoLists.data?.map((todoList) => {
            return (
              <Row
                item={todoList}
                key={todoList.id}
                handleDelete={handleDeleteTodo}
                confirmEdit={confirmEditTodolist}
              />
            );
          })}
        </div>
      </main>
    </>
  );
};

export default Home;
